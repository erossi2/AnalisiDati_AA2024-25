# -*- coding: utf-8 -*-
"""Create_particle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SJxQ51xSntE8x-ydr3xkHk9OQ2txtBNe

Le classi sono un comodo strumento che ci permette di raggruppare variabili e funzioni in maniera logica e riutilizzabile permettendoci di gestire progetti anche di grosse dimensioni in maniera molto semplice. Le funzione associate alla classe sono chiamate metodi.


In Python, per creare una classe Studente ci basta fare:

**class myClass:**

Una volta creata, possiamo iniziare ad aggiungere attributi e metodi alla classe. Per aggiungere queste caratteristiche usiamo una funzione speciale, chiamata metodo **__init**, che significa inizializzatore, conosciuto anche come metodo costruttore. Il suo scopo è quello di costruire gli oggetti.

Quando creiamo dei metodi all'interno della classe, tra le parentesi di questi metodi passiamo, come primo parametro, l'istanza della classe, e la chiamiamo per convenzione **self** che rappresenta una referenza a ciascun oggetto creato dalla classe. Il metodo init inizializza e attiva le varie proprietà di ciascun self, quindi di ciascun oggetto o istanza.
"""

import math

#crea la classe
class particle:
  #per aggiungere caratteristiche usiamo il metodo init
  #primo parametro l'istanza della classe e la chiamiamo per convenzione self
  def __init__(self,px,py,pz,m):
    self.px = px
    self.py = py
    self.pz = pz
    self.m = m
    self.e = math.sqrt(m**2+(px**2+py**2+pz**2))
    self.p4=(self.px,self.py,self.pz,self.e)
  def particle_p4(self,lorentz_p4):
    return particle(px=lorentz_p4.px,py=lorentz_p4.py,pz=lorentz_p4.pz, e=lorentz_p4.E)
  def init(self, lorentz_p4):
    self.px = lorentz_p4.px
    self.py = lorentz_p4.py
    self.pz = lorentz_p4.pz
    self.e = lorentz_p4.E
    self.p4 = (self.px, self.py, self.pz, self.e)
  def particle_info(self):
    return f"\n Charatcteristics of the particle:\n px= {self.px}\n py= {self.py}\n pz= {self.pz}\n m= {self.m}\n \n momentum-energy four-vector:\n e={self.e} \n p4={self.p4} "
# aggiungo le caratteristiche della particella (px,py,pz,m)
x=particle(7,7,8,9)
# mi faccio stampare a schermo l'energia e il quadrimpulso
print(x.e)
print(x.p4)
# mi faccio stampare a schermo l'uscita del metodo particle_info()
print(x.particle_info())
# Un modo alternativo per avere lo stesso risultato 
print(particle(7,7,8,9).particle_info())
