# -*- coding: utf-8 -*-
"""SimpleTwoSampleTest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LdBFvp6mAU6WR1S-c4A7ziuvi6lhUs8P

Two Sample T-Test in Python

Very simple application of the Two Sample T-Test

*   import the scipy.stats module
*   define the two samples and evaluate the variance
*   use the stats.ttest_ind function to perform the two samples t-test
*   interpret the results.
"""

# Import library
import scipy.stats as stats
import numpy as np

data_group1 = np.array([160, 150, 160, 156.12, 163.24,
                        160.56, 168.56, 174.12,
                        167.123, 165.12])
data_group2 = np.array([157.97, 146, 140.2, 170.15,
                        167.34, 176.123, 162.35, 159.123,
                        169.43, 148.123])

# Print the variance of both data groups
print("group1 variance: ",np.var(data_group1),"group2 variance: ", np.var(data_group2))

# Perform the two sample t-test with equal variances
t_statistic, p_value = stats.ttest_ind(a=data_group1, b=data_group2, equal_var=True)
print("t_statistic = ",t_statistic, "p_value = ",p_value)


if p_value < 0.05:
    print("We reject the null hypothesis")
else:
    print("We accept the null hypothesis")

"""**Method 2: Two-Sample T-Test with Pingouin**

[Pingouin](https://pingouin-stats.org/build/html/index.html) is an open-source statistical package written in Python 3 and based mostly on Pandas and NumPy.
Pingouin is designed for users who want simple yet exhaustive stats functions.

For example, the ttest_ind function of SciPy returns only the T-value and the p-value. By contrast, the ttest function of Pingouin returns the T-value, the p-value, the degrees of freedom, the effect size (Cohen’s d), the 95% confidence intervals of the difference in means, the statistical power and the Bayes Factor (BF10) of the test.

Syntax: ttest(data_group1, data_group2, correction = True/False)
*   install pingouin: !pip install pingouin
*   import pingouin
*   define the two samples
*   use the stats.ttest_ind function to perform the two samples t-test
*   interpret the results.


correction = “True”: The standard independent two sample t-test will be conducted by taking into consideration the homogeneity assumption.


correction = “False”: The Welch’s t-test will be conducted by not taking into consideration the homogeneity assumption.


The result of the test is a pandas.DataFrame a Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects. The primary pandas data structure.

"""

# Python program to conduct two-sample
# T-test using pingouin library
!pip install pingouin
# Importing library
from statsmodels.stats.weightstats import ttest_ind
import numpy as np
import pingouin as pg

# Creating data groups
data_group1 = np.array([160, 150, 160, 156.12, 163.24,
                        160.56, 168.56, 174.12,
                        167.123, 165.12])
data_group2 = np.array([157.97, 146, 140.2, 170.15,
                        167.34, 176.123, 162.35, 159.123,
                        169.43, 148.123])

# Conducting two-sample ttest
result = pg.ttest(data_group1,
                  data_group2,
                  correction=True)
# the result of the test is a pandas.DataFrame

# Print the result
print(result)

print("Another way to print the results ")
print(result.T)

for idx, row in result.iterrows():
    print(row['p-val'])
    if row['p-val'] < 0.05:
        print("We reject the null hypothesis")
    else:
        print("We accept the null hypothesis")

"""**Interpretation of the results with pengouin**

The p-value of the test comes out to be equal to 0.523, which is greater than the significance level alpha (that is, 0.05). This implies that we can say that the two samples are part of the same population so we accept the null hypothesis. The Cohen’s D that is obtained in a t-test is in terms of the relative strength. According to **Cohen**:

*   cohen-d = 0.2 is considered as the ‘small’ effect size
*   cohen-d = 0.5 is considered as the ‘medium’ effect size
*   cohen-d = 0.8 is considered as the ‘large’ effect size

It implies that even if the two data groups’ means don’t differ by 0.2 standard deviations or more then the difference is trivial, even if it is statistically significant.

**Method 3: Two-Sample T-Test with Statsmodels**

[statsmodels](https://www.statsmodels.org/stable/index.html) is a Python module that provides classes and functions for the estimation of many different statistical models, as well as for conducting statistical tests, and statistical data exploration. An extensive list of result statistics are available for each estimator. The results are tested against existing statistical packages to ensure that they are correct. The package is released under the open source Modified BSD (3-clause) license. The online documentation is hosted at statsmodels.org.

Firstly, let’s create the sample data. We are creating two arrays and now let’s perform the two-sample T-test. Statsmodels library provides ttest_ind() function to conduct two-sample T-Test
"""

# Python program to conduct
# two-sample t-test using statsmodels

# Importing library
from statsmodels.stats.weightstats import ttest_ind
import numpy as np
import pingouin as pg

# Creating data groups
data_group1 = np.array([160, 150, 160, 156.12,
                        163.24,
                        160.56, 168.56, 174.12,
                        167.123, 165.12])
data_group2 = np.array([157.97, 146, 140.2, 170.15,
                        167.34, 176.123, 162.35,
                        159.123, 169.43, 148.123])

# Conducting two-sample ttest
p_value = ttest_ind(data_group1, data_group2)

print("t_statistic = ",t_statistic, "p_value = ",p_value)

if p_value[1] < 0.05:
    print("We reject the null hypothesis")
else:
    print("We accept the null hypothesis")